#!/usr/bin/env bash

clidialog=$(basename "$(command -v dialog)")
guidialog=$(basename "$(command -v kdialog zenity | head -1)")
clieditor=$(basename "$(command -v nano vi vim micro | head -1)")

# Geçici dosyayı kur
dosya=$((mktemp) 2>/dev/null) || dosya=/tmp/etkilesim$$
trap "rm -f $dosya" 0 $SIG_NONE $SIG_HUP $SIG_INT $SIG_QUIT $SIG_TERM


# $1 tür: bilgi, uyarı, hata.
# $2 başlık: Mesaj başlığı.
# $3 ileti: İleti.
mesajGoster() {
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            case $1 in
                bilgi) tip="--msgbox"  ;;
                uyari) tip="--sorry" ;;
                hata) tip="--error" ;;
            esac
            kdialog $tip "$3" --title="$2"
        elif [[ $guidialog == zenity ]]; then
            case $1 in
                bilgi) tip="--info"  ;;
                uyari) tip="--warning" ;;
                hata) tip="--error" ;;
            esac
            zenity $tip --text="$3" --title="$2"
        fi
    else
        baslik="$2 - ${1^}"
        if [[ -n "$clidialog" ]]; then
            # --keep-tite: dialog çıktısını alternatif ekranda göster
            $clidialog --keep-tite --title "$baslik" --clear --msgbox "$3" 0 0
        elif [[ -n "$clieditor" ]]; then
            case $clieditor in
                nano) ReadOnlyFlag=-v ;;
                vi|vim) ReadOnlyFlag=-R ;;
                micro) ReadOnlyFlag="-readonly true" ;;
            esac
            cat << EOF > "$dosya"
            
    $baslik

    $3

    Mesajı okuduktan sonra bu dosyayı kapatabilirsiniz...
EOF
            "$clieditor" $ReadOnlyFlag "$dosya"
            rm -f "$dosya"
        else
            # En son seçenek olarak bir kabuk aracılığıyla göster
            cat << EOF

    $baslik

    $3

EOF
        fi
    fi
}

# $1 dosya
yaziGoster() {
    baslik="${1##*/}"
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            kdialog --textbox "$1" 800 600
        elif [[ $guidialog == zenity ]]; then
            zenity --text-info --title="$baslik" --filename="$1"
        fi
    else
        if [[ -n $clidialog ]]; then
            $clidialog --keep-tite --title "$baslik" --textbox "$1" 0 0
        elif [[ -n "$clieditor" ]]; then
            case $clieditor in
                nano) ReadOnlyFlag=-v ;;
                vi|vim) ReadOnlyFlag=-R ;;
                micro) ReadOnlyFlag="-readonly true" ;;
            esac
            $clieditor $ReadOnlyFlag "$1"
        else
            cat << EOF

$baslik

$(cat "$1")

EOF
        fi
    fi
}

# $1 başlık: Mesaj başlığı.
# $2 ileti: İleti.
bildirimGoster() {
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            kdialog --passivepopup "$2" --title="$1"
        elif [[ $guidialog == zenity ]]; then
            zenity --notification --text="$2" --title="$1"
        fi
    else
        baslik="Bildirim - $1"
        if [[ -n $clidialog ]]; then
            # Bekleme süresini hesapla
            sayimBaslik=$(echo "$baslik" | wc -w)
            sayimIleti=$(echo "$2" | wc -w)
            sozcukSayimi=$((sayimBaslik + sayimIleti))
            bekleme=$((sozcukSayimi * 200))
            if ((bekleme >= 3000)); then
                ((bekleme = bekleme / 1000))
            else
                bekleme=3
            fi
            echo "Bekleme '$bekleme' sn"
            $clidialog --title "$baslik" --infobox "$2" 0 0
            # Hesaplanan süre kadar bekle ve ardından ekranı temizle
            sleep $bekleme; clear
        elif [[ -n "$clieditor" ]]; then
            case $clieditor in
                nano) ReadOnlyFlag=-v ;;
                vi|vim) ReadOnlyFlag=-R ;;
                micro) ReadOnlyFlag="-readonly true" ;;
            esac
            cat << EOF > "$dosya"
    $baslik
    
    $2
                
    Bildirimi okuduktan sonra bu dosyayı kapatabilirsiniz...
EOF
            $clieditor $ReadOnlyFlag "$dosya"
            rm -f "$dosya"
        else
            # En son seçenek olarak bir kabuk aracılığıyla göster
            cat << EOF

    $baslik

    $2

EOF
        fi
    fi
}


# Dialog çıkış kodlarını tanımla
: ${DIALOG_OK=0}
: ${DIALOG_CANCEL=1}
: ${DIALOG_HELP=2}
: ${DIALOG_EXTRA=3}
: ${DIALOG_ITEM_HELP=4}
: ${DIALOG_TIMEOUT=5}
: ${DIALOG_ESC=255}

# Kullanılabilir UI etkileşim araçlarından birini kullanarak evet-hayır dialogu gösterir.
# $1 başlık: evet-hayır dialogu başlığı.
# $2 açıklama: evet-hayır dialogu için açıklama.
evetHayirGoster() {
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            kdialog --title "$1" --yesno "$2"
            return $?
        elif [[ $guidialog == zenity ]]; then
            zenity --title "$1" --question --text "$2"
            return $?
        fi
    else
        if [[ -n $clidialog ]]; then
            # Dialog ui çıktısını stdout (fd 1) çıkışına verdiğinden sonucu 
            # stderr (fd 2) çıkışına verir. Ancak yesno dialoğu yes için 0,
            # no için de 1 döndürdüğü için ayrıca stderr okumaya gerek yok.
            $clidialog --keep-tite --title "$1" --yesno "$2" 0 0
            dk=$? # Dönüş kodunu al
            
            # Sonucu dönüş koduna göre değerlendir
            case $dk in
                $DIALOG_OK) return 0 ;;
                $DIALOG_ESC)
                    if test -s "$dosya"; then
                        cat "$dosya"
                        return 0
                    else
                        return 1
                    fi
                    ;;
                *) return 1 ;;
            esac
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$2"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            
            if [[ -n "$clieditor" ]]; then
                cat << SON > "$dosya"

# Başlık
#   $1
#
# İleti
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Kabul edilebilir yanıtlar:
#   - Evet, evet, E, e
#   - Hayır, hayır, H, h
# Yanıtınızı ilk satıra girip dosyayı kaydediniz.
SON
                $clieditor "$dosya"
                ynt=$(head -1 "$dosya" | xargs)
            else
                cat << SON
# Başlık
#   $1
#
# İleti
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Kabul edilebilir yanıtlar:
#   - Evet, evet, E, e
#   - Hayır, hayır, H, h

SON
                read -t 20 -p "Lütfen yanıtızı giriniz: " ynt
            fi
            
            case $ynt in
                Evet|evet|E|e) return 0 ;;
                Hayır|hayır|H|h) return 1 ;;
                *) return 2 ;;
            esac
        fi
    fi
}


# Mevcut veya kullanılabilir dialog araçlarından birini kullanarak seçenek gösterir.
# $1 başlık: Seçim dialogu başlığı.
# $2 açıklama: Seçim diyalogu açıklaması.
# $... seçenekler: Gösterilecek seçenek listesi.
secenekGoster() {
    local baslik aciklama
    local secenekler=()
    if [[ $# -gt 3 ]]; then
        s=1
        while [[ $# -gt 0 ]]; do
#             echo "secenekGoster: Sayım $s, Arg $1"
            case $s in
                1) baslik="$1" ;;
                2) aciklama="$1" ;;
                *)
                    # 2nci parametreden sonrakileri bir dizide topla
                    secenekler+=("$1") ;;
            esac
            ((s++))
            shift
        done
    else
        baslik=$1
        aciklama=$2
        # Boşlukla ayrılmış seçenekleri diziye dönüştür
        read -a secenekler <<< "$3"
    fi
    
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            secim=$(kdialog --combobox "$aciklama" --title "$baslik" "${secenekler[@]}" )
            dk=$?
            echo "$secim"; return $dk
        elif [[ $guidialog == zenity ]]; then
            zsecenekler="${secenekler[*]}"
            zsecenekler="${zsecenekler//' '/'|'}"
            sentenceCase="${1,,}"
            sentenceCase="${sentenceCase^}"
            secim=$(zenity --forms --title "$baslik" --text "$sentenceCase" \
                --add-combo "$aciklama" --combo-values="$zsecenekler" \
            )
            dk=$?
            echo "$secim"; return $dk
        fi
    else
        if [[ -n $clidialog ]]; then
            # Dialog ui çıktısını stdout (fd 1) çıkışına verdiğinden sonucu 
            # stderr (fd 2) çıkışına verir. Bu yüzden sonucu buradan okumak için
            # stderr'i geçici dosyaya yönlendireceğiz.
            # 
            # Önce değişkenleri hazırla ve seçenekleri yeniden biçimlendir.
            aciklama+="${2}\n\nSeçmek için BOŞLUK tuşunu kullanın."
            local shdialogSecenekler=()
            for scnk in "${secenekler[@]}"; do
                shdialogSecenekler+=("$scnk" "" OFF)
            done
            $clidialog --keep-tite --title "$1" \
                --radiolist "$aciklama" 0 0 ${#secenekler[@]} \
                "${shdialogSecenekler[@]}" \
                2> "$dosya"
            dk=$? # Dönüş kodunu al
            
            # Sonucu dönüş koduna göre değerlendir
            case $dk in
                $DIALOG_OK) 
                    cat "$dosya" # Seçimi stdout'a yazdır
                    return 0
                    ;;
                $DIALOG_ESC)
                    if test -s "$dosya"; then
                        cat "$dosya"
                        return 0
                    else
                        return 1
                    fi
                    ;;
                *) return 1 ;;
            esac
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$aciklama"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            
            if [[ -n "$clieditor" ]]; then
                cat << SON > "$dosya"

# Başlık            
#   $baslik
#
# Açıklama
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Kullanılabilir seçenekler:
$(
    for s in "${!secenekler[@]}"; do
        echo -e "#\t- ${secenekler[$s]}"
    done
)
# Değeri ilk satıra girip dosyayı kaydediniz.
SON
                $clieditor "$dosya"
                deger=$(head -1 "$dosya" | xargs)
            else
                cat << SON
# Başlık            
#   $baslik
#
# Açıklama
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Kullanılabilir seçenekler:
$(
    for s in "${!secenekler[@]}"; do
        echo -e "#\t- ${secenekler[$s]}"
    done
)

SON
                read -t 60 -p "Lütfen yanıtızı giriniz: " deger
            fi
            echo "$deger"
        fi
    fi
}


# Kullanılabilir UI etkileşim araçlarından birini kullanarak dizin seçimi dialogu gösterir.
# $1 başlık: Dizin seçim dialogu başlığı.
dizinSec() {
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            secim=$(kdialog --getexistingdirectory ~ "$1")
            dk=$?
            echo "$secim"; return $dk
        elif [[ $guidialog == zenity ]]; then
            secim=$(zenity --file-selection --directory --title "$1")
            dk=$?
            echo "$secim"; return $dk
        fi
    else
        if [[ -n $clidialog ]]; then
            # Dialog ui çıktısını stdout (fd 1) çıkışına verdiğinden sonucu 
            # stderr (fd 2) çıkışına verir. Bu yüzden sonucu stdout'a yönlendirmek
            # için IO redirection numaraları yapacağız.
            exec 3>&1 # File descriptor 3ü stdout'a kopyala
            sonuc=$($clidialog --keep-tite --title "$1" --dselect "$HOME/" 0 0 2>&1 1>&3)
            dk=$? # Dönüş kodunu al
            exec 3>&- # File descriptor 3ü kapat
            # Sonucu dönüş koduna göre değerlendir
            case $dk in
                $DIALOG_OK) 
                    echo "$sonuc" # Seçimi stdout'a yazdır
                    return 0
                    ;;
                $DIALOG_ESC)
                    if test -n "$sonuc"; then
                        echo "$sonuc"
                        return 0
                    else
                        return 1
                    fi
                    ;;
                *) return 1 ;;
            esac
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$2"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            
            if [[ -n "$clieditor" ]]; then
                cat <<- SON > "$dosya"

# Başlık
#   $1
#
# Seçmek istediğiniz dizinin tam yolunu ilk satıra girip dosyayı kaydediniz.
SON
                $clieditor "$dosya"
                deger=$(head -1 "$dosya" | xargs)
            else
                cat <<- SON > "$dosya"
# Başlık
#   $1

SON
                read -t 120 -p "Seçmek istediğiniz dizinin tam yolunu giriniz: " deger
            fi
            echo "$deger"
        fi
    fi
}

# Kullanılabilir UI etkileşim araçlarından birini kullanarak metin girdisi dialogu gösterir.
# $1 başlık: Metin girdisi dialogu başlığı.
# $2 açıklama: Metin girdisi için açıklama.
girdiAl() {
    if [[ -n "$guidialog" ]]; then
        if [[ $guidialog == kdialog ]]; then
            secim=$(kdialog --inputbox "$2" --title "$1")
            dk=$?
            echo "$secim"; return $dk
        elif [[ $guidialog == zenity ]]; then
            secim=$(zenity --title "$1" --entry --text "$2")
            dk=$?
            echo "$secim"; return $dk
        fi
    else
        if [[ -n $clidialog ]]; then
            # Dialog ui çıktısını stdout (fd 1) çıkışına verdiğinden sonucu 
            # stderr (fd 2) çıkışına verir. Bu yüzden sonucu buradan okumak için
            # stderr'i geçici dosyaya yönlendireceğiz.
            $clidialog --keep-tite --title "$1" --inputbox "$2" 0 0 2> "$dosya"
            dk=$? # Dönüş kodunu al
            
            # Sonucu dönüş koduna göre değerlendir
            case $dk in
                $DIALOG_OK) 
                    cat "$dosya" # Seçimi stdout'a yazdır
                    return 0
                    ;;
                $DIALOG_ESC)
                    if test -s "$dosya"; then
                        cat "$dosya"
                        return 0
                    else
                        return 1
                    fi
                    ;;
                *) return 1 ;;
            esac
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$2"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi

            if [[ -n "$clieditor" ]]; then
                cat << SON > "$dosya"

# Başlık
#   $1
#
# İleti
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Değeri ilk satıra girip dosyayı kaydediniz.
SON
                $clieditor "$dosya"
                deger=$(head -1 "$dosya" | xargs)
            else
                cat << SON

# Başlık
#   $1
#
# İleti
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
SON
                read -t 60 -p "Lütfen yanıtızı giriniz: " deger
            fi
            echo "$deger"
        fi
    fi
}

