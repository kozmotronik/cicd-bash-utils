#!/usr/bin/env bash

# Kullanılabilir terminal ve editörlerden birini al
# terminal="${terminal##*/}" # basename alternatifi; yolu kaldır
terminal=$(basename "$(command -v konsole gnome-terminal xterm | head -1)")
# dialog=$(basename $(command -v dialog))
guidialog=$(basename "$(command -v kdialog zenity | head -1)")
editor=$(basename "$(command -v nano micro ne emacs vim tilde | head -1)")
dosya="$(dirname "$0")/tmp.txt"

# $1 tür: bilgi, uyarı, hata.
# $2 başlık: Mesaj başlığı.
# $3 ileti: İleti.
mesajGoster() {
    if [[ $guidialog == kdialog ]]; then
        case $1 in
            bilgi) tip="--msgbox"  ;;
            uyari) tip="--sorry" ;;
            hata) tip="--error" ;;
        esac
        kdialog $tip "$3" --title="$2"
    elif [[ $guidialog == zenity ]]; then
        case $1 in
            bilgi) tip="--info"  ;;
            uyari) tip="--warning" ;;
            hata) tip="--error" ;;
        esac
        zenity $tip --text="$3" --title="$2"
    else
        baslik="$2 - ${1^}"
        if [[ -n $dialog ]]; then
            if [[ $terminal == gnome-terminal ]]; then
                $terminal -- $dialog --title "$baslik" --msgbox "$3" 16 80
            else
                $terminal -e $dialog --title "$baslik" --msgbox "$3" 16 80
            fi
        else
            if [[ $terminal == gnome-terminal ]]; then
                gnome-terminal -- bash -c "echo -e '$baslik\n\n$3'; exec bash -i" &
            elif [[ $terminal == konsole ]]; then
                konsole --hold -e echo -e "$baslik\n\n$3" &
            elif [[ $terminal == xterm ]]; then
                xterm -hold -e echo -e "$baslik\n\n$3" &
            elif command -v xdg-open &> /dev/null; then
                "$(date)" > "$dosya"
                echo -e "$baslik\n\n$3" >> "$dosya"
                echo -e "\n\nMesajı okuduktan sonra bu dosyayı kapatabilirsiniz..."
                xdg-open "$dosya" &> /dev/null
                # Editöre erişildikten sonra dosyayı sil
                inotifywait -qqe access -t 30 "$dosya"
                sleep 5
            fi
        fi
        rm -f "$dosya"
    fi
}

# $1 dosya
yaziGoster() {
    baslik="${1##*/}"
    if [[ $guidialog == kdialog ]]; then
        kdialog --textbox "$1" 800 600
    elif [[ $guidialog == zenity ]]; then
        zenity --text-info --title="$baslik" --filename="$1"
    else
        if [[ -n $dialog ]]; then
            if [[ $terminal == gnome-terminal ]]; then
                $terminal -- $dialog --title "$baslik" --textbox "$1" 800 600
            else
                $terminal -e $dialog --title "$baslik" --textbox "$1" 800 600
            fi
        else
            if [[ $terminal == gnome-terminal ]]; then
                gnome-terminal -- bash -c "cat $1; exec bash -i" &
            elif [[ $terminal == konsole ]]; then
                konsole --hold -e "cat $1" &
            elif [[ $terminal == xterm ]]; then
                xterm -hold -e "cat $1" &
            elif command -v xdg-open &> /dev/null; then
                xdg-open "$1" &> /dev/null
            fi
        fi
    fi
}

# $1 başlık: Mesaj başlığı.
# $2 ileti: İleti.
bildirimGoster() {
    if [[ $guidialog == kdialog ]]; then
        kdialog --passivepopup "$2" --title="$1"
    elif [[ $guidialog == zenity ]]; then
        zenity --notification --text="$2" --title="$1"
    else
        baslik="$1 - ${1^}"
        if [[ -n $dialog ]]; then
            if [[ $terminal == gnome-terminal ]]; then
                $terminal -- $dialog --title "$baslik" --msgbox "$2" 16 80
            else
                $terminal -e $dialog --title "$baslik" --msgbox "$2" 16 80
            fi
        else
            if [[ $terminal == gnome-terminal ]]; then
                gnome-terminal -- bash -c "echo -e '$baslik\n\n$2'; exec bash -i" &
            elif [[ $terminal == konsole ]]; then
                konsole --hold -e echo -e "$baslik\n\n$2" &
            elif [[ $terminal == xterm ]]; then
                xterm -hold -e echo -e "$baslik\n\n$2" &
            elif command -v xdg-open &> /dev/null; then
                "$(date)" > "$dosya"
                echo -e "$baslik\n\n$2" >> "$dosya"
                echo -e "\n\nBildirimi okuduktan sonra bu dosyayı kapatabilirsiniz..."
                xdg-open "$dosya" &> /dev/null
                # Editöre erişildikten sonra dosyayı sil
                inotifywait -qqe access -t 30 "$dosya"
                sleep 5
            fi
        fi
        rm -f "$dosya"
    fi
}

# Kullanılabilir UI etkileşim araçlarından birini kullanarak evet-hayır dialogu gösterir.
# $1 başlık: evet-hayır dialogu başlığı.
# $2 açıklama: evet-hayır dialogu için açıklama.
evetHayirGoster() {
    if [[ $guidialog == kdialog ]]; then
        kdialog --title "$1" --yesno "$2"
        return $?
    elif [[ $guidialog == zenity ]]; then
        zenity --title "$1" --question --text "$2"
        return $?
    else
        ret=0
        touch "$dosya"
        # En son çare, terminal emülatörü
        if [[ -n $dialog ]]; then
        # FIXME şimdilik dialog iptal
        # TODO Whiptail bir terminale ihtiyaç duyduğundan onu yeni bir terminal oturumunda 
        # çalıştırmak gerekli. Aşağıdaki betiklerde çalıştırma başarılı oluyor ancak seçimi 
        # bir türlü dosyaya yazdıramadım. Bir çare bulana dek terminal dialog iptal.
            echo "Dialog $dialog"
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$2"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            # Heredoc ile yaz; İçerik ve sonlama ilk sütundan başlar
            # Sonlama ilk sütundan başlamazsa hata verir
            cat <<- SON > "$dosya"


# Başlık
#   $1
#
# İleti
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Yanıtınızı ilk satıra girip dosyayı kaydediniz.
# Kabul edilebilir yanıtlar:
#   - Evet, evet, E, e
#   - Hayır, hayır, H, h
SON
            if command -v xdg-open &> /dev/null; then
                xdg-open "$dosya" &> /dev/null
            else
                # Dosya değişimlerini izleyebilmek için terminalleri (& ile) asenkron çalıştır.
                if [[ $terminal == gnome-terminal ]]; then
                    $terminal -- $editor "$dosya" &
                else
                    $terminal -e $editor "$dosya" &
                fi
            fi
            # Değer girilip kaydedilmesini bekle ve ardından dosyayı sil
            # inotifywait stdo'ya hiçbir çıktı vermemesi için iki kez q bayrağını kullan
            inotifywait -qqe close_write,delete -t 30 "$dosya"
            case $? in
                # Çalışırken bir hata veya bir şeyler inotify bekçisini durmaya zorladı
                1) echo "evetHayirGoster: Değer girilmesini beklerken bir hata oluştu." >&2 return 1 ;;
                # Timeout (zaman aşımı) oldu
                2) echo "evetHayirGoster: Değer girilmesini beklerken zaman aşımı." >&2 return 1 ;;
            esac
            # İşlem başarılı, bilgileri dosyadan edin
            deger=$(head -1 "$dosya" | xargs)
            case $deger in
                Evet|evet|E|e) ret=0 ;;
                Hayır|hayır|H|h) ret=1 ;;
                *) ret=2 ;;
            esac
        fi
        rm -f "$dosya"
        return $ret
    fi
}


# Mevcut veya kullanılabilir dialog araçlarından birini kullanarak seçenek gösterir.
# $1 başlık: Seçim dialogu başlığı.
# $2 açıklama: Seçim diyalogu açıklaması.
# $... seçenekler: Gösterilecek seçenek listesi.
secenekGoster() {
    local baslik aciklama
    local secenekler=()
    if [[ $# -gt 3 ]]; then
        s=1
        while [[ $# -gt 0 ]]; do
#             echo "secenekGoster: Sayım $s, Arg $1"
            case $s in
                1) baslik="$1" ;;
                2) aciklama="$1" ;;
                *)
                    # 2nci parametreden sonrakileri bir dizide topla
                    secenekler+=("$1") ;;
            esac
            ((s++))
            shift
        done
    else
        baslik=$1
        aciklama=$2
        # Boşlukla ayrılmış seçenekleri diziye dönüştür
        read -a secenekler <<< "$3"
    fi
    
    if [[ $guidialog == kdialog ]]; then
        secim=$(kdialog --combobox "$aciklama" --title "$baslik" "${secenekler[@]}" )
        dk=$?
        echo "$secim"; return $dk
    elif [[ $guidialog == zenity ]]; then
        zsecenekler="${secenekler[*]}"
        zsecenekler="${zsecenekler//' '/'|'}"
#         echo $zsecenekler
        sentenceCase="${1,,}"
        sentenceCase="${sentenceCase^}"
        secim=$(zenity --forms --title "$baslik" --text "$sentenceCase" \
            --add-combo "$aciklama" --combo-values="$zsecenekler" \
        )
        dk=$?
        echo "$secim"; return $dk
    else
        touch "$dosya"
        # En son çare, terminal emülatörü
        if [[ -n $dialog ]]; then
#             for s in "${secenekler[@]}"; do
#                 secenekler+=("$s" "")
#             done
        # FIXME şimdilik dialog iptal
        # TODO dialog bir terminale ihtiyaç duyduğundan onu yeni bir terminal oturumunda 
        # çalıştırmak gerekli. Aşağıdaki betiklerde çalıştırma başarılı oluyor ancak seçimi 
        # bir türlü dosyaya yazdıramadım. Bir çare bulana dek terminal dialog iptal.
            echo "Dialog $dialog"
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$aciklama"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            # Heredoc ile yaz; İçerik ve sonlama ilk sütundan başlar
            # Sonlama ilk sütundan başlamazsa hata verir
            cat <<- SON > "$dosya"


# Başlık            
#   $baslik
#
# Açıklama
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Değeri ilk satıra girip dosyayı kaydediniz.
# Kullanılabilir seçenekler:
$(
    for s in "${!secenekler[@]}"; do
        echo -e "#\t- ${secenekler[$s]}"
    done
)
SON
            if command -v xdg-open &> /dev/null; then
                xdg-open "$dosya" &> /dev/null
                dk=$?
            else
                if [[ $terminal == gnome-terminal ]]; then
                    $terminal -- $editor "$dosya" &
                else
                    $terminal -e $editor "$dosya" &
                fi
                dk=$?
            fi
            # Değer girilip kaydedilmesini bekle ve ardından dosyayı sil
            inotifywait -qqe close_write,delete -t 30 "$dosya"
            case $? in
                # Çalışırken bir hata veya bir şeyler inotify bekçisini durmaya zorladı
                1) echo "evetHayirGoster: Değer girilmesini beklerken bir hata oluştu." >&2 return 1 ;;
                # Timeout (zaman aşımı) oldu
                2) echo "evetHayirGoster: Değer girilmesini beklerken zaman aşımı." >&2 return 1 ;;
            esac
            # İşlem başarılı, bilgileri dosyadan edin
            deger=$(head -1 "$dosya" | xargs)
            echo "$deger"
        fi
        rm -f "$dosya"
    fi
}


# Kullanılabilir UI etkileşim araçlarından birini kullanarak dizin seçimi dialogu gösterir.
# $1 başlık: Dizin seçim dialogu başlığı.
dizinSec() {
    if [[ $guidialog == kdialog ]]; then
        secim=$(kdialog --getexistingdirectory ~ "$1")
        dk=$?
        echo "$secim"; return $dk
    elif [[ $guidialog == zenity ]]; then
        secim=$(zenity --file-selection --directory --title "$1")
        dk=$?
        echo "$secim"; return $dk
    else
        touch "$dosya"
        # En son çare, terminal emülatörü
        if [[ -n $dialog ]]; then
        # FIXME şimdilik dialog iptal
        # TODO Whiptail bir terminale ihtiyaç duyduğundan onu yeni bir terminal oturumunda 
        # çalıştırmak gerekli. Aşağıdaki betiklerde çalıştırma başarılı oluyor ancak seçimi 
        # bir türlü dosyaya yazdıramadım. Bir çare bulana dek terminal dialog iptal.
            echo "Dialog $dialog"
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$2"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            # Heredoc ile yaz; İçerik ve sonlama ilk sütundan başlar
            # Sonlama ilk sütundan başlamazsa hata verir
            cat <<- SON > "$dosya"


# Başlık
#   $1
#
# Seçmek istediğiniz dizinin tam yolunu ilk satıra girip dosyayı kaydediniz.
SON
            if command -v xdg-open &> /dev/null; then
                xdg-open "$dosya" &> /dev/null
                dk=$?
            else
                # Dosya değişimlerini izleyebilmek için terminalleri (& ile) asenkron çalıştır.
                if [[ $terminal == gnome-terminal ]]; then
                    $terminal -- $editor "$dosya" &
                else
                    $terminal -e $editor "$dosya" &
                fi
                dk=$?
            fi
            # Değer girilip kaydedilmesini bekle ve ardından dosyayı sil
            inotifywait -qqe close_write,delete -t 30 "$dosya"
            case $? in
                # Çalışırken bir hata veya bir şeyler inotify bekçisini durmaya zorladı
                1) echo "evetHayirGoster: Değer girilmesini beklerken bir hata oluştu." >&2 return 1 ;;
                # Timeout (zaman aşımı) oldu
                2) echo "evetHayirGoster: Değer girilmesini beklerken zaman aşımı." >&2 return 1 ;;
            esac
            # İşlem başarılı, bilgileri dosyadan edin
            deger=$(head -1 "$dosya" | xargs)
            echo "$deger"
        fi
        rm -f "$dosya"
    fi
}

# Kullanılabilir UI etkileşim araçlarından birini kullanarak metin girdisi dialogu gösterir.
# $1 başlık: Metin girdisi dialogu başlığı.
# $2 açıklama: Metin girdisi için açıklama.
girdiAl() {
    if [[ $guidialog == kdialog ]]; then
        secim=$(kdialog --inputbox "$2" --title "$1")
        dk=$?
        echo "$secim"; return $dk
    elif [[ $guidialog == zenity ]]; then
        secim=$(zenity --title "$1" --entry --text "$2")
        dk=$?
        echo "$secim"; return $dk
    else
        touch "$dosya"
        # En son çare, terminal emülatörü
        if [[ -n $dialog ]]; then
        # FIXME şimdilik dialog iptal
        # TODO Whiptail bir terminale ihtiyaç duyduğundan onu yeni bir terminal oturumunda 
        # çalıştırmak gerekli. Aşağıdaki betiklerde çalıştırma başarılı oluyor ancak seçimi 
        # bir türlü dosyaya yazdıramadım. Bir çare bulana dek terminal dialog iptal.
            echo "Dialog $dialog"
        else
            # Kaçış karakterlerini yorumla; stringi \n'den ayırarak diziye çevir
            tmp="$2"; msg=()
            if [[ "$tmp" =~ "\n" ]]; then
                while true; do
                    msg+=("${tmp%%"\n"*}")
                    tmp=${tmp#*"\n"}
                    if [[ ! "$tmp" =~ "\n" ]]; then
                        msg+=("$tmp")
                        break
                    fi
                done
            else
                msg=("$tmp")
            fi
            # Heredoc ile yaz; İçerik ve sonlama ilk sütundan başlar
            # Sonlama ilk sütundan başlamazsa hata verir
            cat <<- SON > "$dosya"


# Başlık
#   $1
#
# İleti
$(
    for m in "${msg[@]}"; do
        echo -e "#\t$m"
    done
)
#
# Değeri ilk satıra girip dosyayı kaydediniz.
SON
            if command -v xdg-open &> /dev/null; then
                xdg-open "$dosya" &> /dev/null
                dk=$?
            else
                # Dosya değişimlerini izleyebilmek için terminalleri (& ile) asenkron çalıştır.
                if [[ $terminal == gnome-terminal ]]; then
                    $terminal -- $editor "$dosya" &
                else
                    $terminal -e $editor "$dosya" &
                fi
                dk=$?
            fi
            # Değer girilip kaydedilmesini bekle ve ardından dosyayı sil
            inotifywait -qqe close_write,delete -t 30 "$dosya"
            case $? in
                # Çalışırken bir hata veya bir şeyler inotify bekçisini durmaya zorladı
                1) echo "evetHayirGoster: Değer girilmesini beklerken bir hata oluştu." >&2 return 1 ;;
                # Timeout (zaman aşımı) oldu
                2) echo "evetHayirGoster: Değer girilmesini beklerken zaman aşımı." >&2 return 1 ;;
            esac
            # İşlem başarılı, bilgileri dosyadan edin
            deger=$(head -1 "$dosya" | xargs)
            echo "$deger"
        fi
        rm -f "$dosya"
    fi
}

